05-JAN-2017 Matthew J. Wolf <matthew.wolf.hpsdr@speciosus.net>

The openHPSDR Plug-in for Wireshark is written to disassemble the openHPSDR 
Ethernet protocol.
The protocol is still under development. 

The current public released protocol documentation list located at:
http://svn.tapr.org/repos_sdr_hpsdr/trunk/Angelia_new_protocol/Documentation/

Version 0.0.1:
  * Initial Beta Version
  - Wireshark version 2.0.1 
  - There is disassembly of Erase Reply. Erase Reply is Command Reply command 
    0x03 from the Hardware.
  - The rest of the Command Reply protocol (port 1024) is disassembled
  - The other protocols are not full disassembled.
  - The other protocols are identfied. Only the sequence number is 
    disassembled. 

Version 0.0.2:
  - Corrected byte 12 of the Discovery Reply.
  - Added Erase Acknowledgment and Erase Complete.
  - All port 1024 communications should now be disassembled.
  - Added DDC Command: dest port 1025 from Host to Hardware.
  - Added High Priority Status: source port 1025 from Hardware to Host.
  - All port port 1025 communications should now be disassembled.

Version 0.0.3:
  - The first attempt of the basic disassembled of every thing but board type 255
    is completed. Board type 255 is the full hardware description in the 
    discovery response. 
  - I may have reversed the order of the Alex 0 bits. 

Version 0.0.4:
  - Wireshark version 2.2.3
  - Added disassembly of the full hardware description, board type 255.
  - Added the "Hardware Time Enable" to the Command Reply (CR) General Datagram.
  - Added endianness options.
  - Added I&Q data format options.
  - Cleaned up formating in attempt to improve understandability.
  - The Plug-in should disassemble every thing that is included in the 
    2.9 Protocol Document. 

-------------------------------------------------------------------------------


General Notes
-------------

I have done basic testing of the plug-in with the Hermes 16 bit firmware dated 
"14 Aug".
 
I have done basic testing with two host applications: pihpsdr (v1.0.0-beta) on
a AMD64 Linux host, and Thetis (v2.3.7 8/16/16) on a 64 Bit MS Windows Host.
     

Non-default Ports
-----------------

The plug in does support using service ports other then the default service ports. The plug in needs to see the 
non-default ports in a Command Reply (CR) General datagram before it will correctly
disassemble traffic using non-default ports.


Protocol Datagrams
------------------

The openHPSDR Ethernet protocol is comprised of eleven different datagram 
formats. Below is a table that lists the default ports and the protocol names
and abbreviation that I use in the WireShark dissector. Traffic originated by
the host uses the port number as the UDP destination port. Traffic originated
by the hardware uses the port as the source UDP port. 

The name below are not the same as the in the protocol documentation. These 
are names that I created.

   Host and Hardware Use the Same Port
   -----------------------------------
   Port   Name
   1024   Command Reply (CR) 
   xxxx   Memory Mapped (MEM) 

   Host to Hardware - destination UDP port
   ---------------------------------------
   1025 	DDC Command (DDCC)
   1026 	DUC Command (DUCC)
   1027 	High Priority Command (HPC)
   1028 	DDC Audio (DDCA)
   1029 to 1036	DUC I&Q Data (DUCIQ)

   Hardware to Host -source UDP port
   ---------------------------------
   1025		High Priority Status (HPS)
   1026		Mic / Line Samples (MICL)
   1027 to 1034	Wide Band Data (WBD)
   1035 to 1114	DDC I&Q Data (DDCIQ) 



Plug In Preferences
-------------------

There are four configurable preferences in the WireShark dissector. 

They are all boolean (on or off) preferences.

-"Strict Checking of Datagram Size"
  Disable checking for added bytes at the end of the datagrams.
  Turning off disables a warning meassge.

-"Strict Pad Checking"
  Strict checking of the amount of pad bytes at the end of the datagrams.
  When enabled, Wireshark (not the openHPSDR dissector) will display
  a "Malformed Packet" error for a datagram without the correct
  number of pad bytes. 
  When disabled, checking is only for one pad byte instead of checking
  for the correct number of pad bytes.

-"strict_program_data_size"
 The openHPSDR dissector assums that the sequence number in the Program datagram 
 (port 1024 from host with command 0x05) can be used as a indicator of the 
 number programing blocks sent. 
 Program Data Roll Over is when the Sequence Number * 256 (max program bytes 
 per program datagram) s larger than the number of Program Blocks listed in the 
 datagram.
 Turning off disables a warning meassge.  

-"ddciq_iq_mtu_check"
 Check to see if the number of I&Q Samples
 will exceed the maximum Ethernet MTU (1500 bytes).
 When disabled, there will be no checking
 to see if the MTU will be exceeded.


Display Filters
---------------

In Wireshark you can filter packets by using display filters. The display filters
use fields that are created when the packets are disassembled. I tried to add
fields for every thing in the protocol except the samples (audio, I&Q) and 
mapped memory (address, data).

The samples and mapped memory have a repetitive format. I created a index field 
for these datagrams. A few examples are below.   

Here is an example display filter for finding a Mic / Line Samples (MICL) datagrams.

openhpsdr-e.micl.sample-idx==718 && openhpsdr-e.micl.sample == 0x1111
-Find all the MICL datagrams in which sample number 718 has a value of 0x1111.  

Here is an example display filter for finding Wide Band (WBD) datagrams.

openhpsdr-e.wbd.adc == 4 && openhpsdr-e.wbd.sample-idx == 2 && openhpsdr-e.wbd.sample == 0x66ee
-Find all WDB datagrams from ADC number 4 in which sample number 2 has the value of 0x66ee.  

The easiest way to find a field name is to click on a item in Wireshark. The field
label will appear on the bottom of the Wireshark window. All the field labels start with 
"openhpsdr-e." . You can also click on the bytes in the raw display to bet the
field labels.


Known Issues
------------

There is one known issue. Switching, in the same capture, from a non-default 
port to default a default port, in a Command Reply (CR) General datagram,  can 
cause Wireshark to crash. The default port numbers where explicitly specified
in the CR General datagram datagram. They where not set to "0". Zero is the 
datagrams also mean use the default ports.  The cause of the issue may be a fix
I implemented to allow for columns to added and deleted. 
     


